<?php

/**
 * @file
 * Primary module hooks for aleevas_experiments module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Component\Utility\Html;
use Drupal\node\Entity\Node;

/**
 * Implements hook_theme().
 */
function aleevas_experiments_theme() {
  return [
    'als_exp_form' => [
      'render element' => 'form',
      'template' => 'templates/aleevas-template',
      '#attached' => [
        'library' => ['aleevas_experiments/local.library']
      ]
    ],
  ];
}

/**
 * Implements hook_page_attachments_alter().
 */
function aleevas_experiments_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'aleevas_experiments/local.library';
}

/**
 * Implements hook_cron().
 */
function aleevas_experiments_cron() {
  _create_nodes_from_queue();
}

/**
 * Implements hook_preprocess_html().
 */
function aleevas_experiments_preprocess_html(&$variables) {
  $title = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'title',
      'content' => 'Hello World!',
    ],
  ];
  $variables['#attached']['html_head'][] = [$title, 'title'];
  // Use the random message generator.
  $random_message = \Drupal::service('aleevas_experiments.random_message')->getRandomMessage();
  \Drupal::messenger()->addMessage($random_message);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function aleevas_experiments_form_contact_message_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $form['system_messages'] = [
    '#markup' => '<div id="' . Html::getClass($form_id) . '-messages"></div>',
    '#weight' => -100,
  ];

  $form['actions']['submit']['#ajax'] = [
    'callback' => 'Drupal\aleevas_experiments\Form\AjaxContactSubmit::ajaxSubmitCallback',
    'event' => 'click',
    'progress' => [
      'type' => 'throbber',
    ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function  aleevas_experiments_preprocess_page(&$variables) {
  $plugin_service = \Drupal::service('plugin.manager.plugin_messenger');
  foreach ($plugin_service->getDefinitions() as $plugin_id => $plugin) {
    $instance = $plugin_service->createInstance($plugin_id);
    $message_type = $instance->getMessageType();
    $message = $instance->getMessage();

    $pages = implode("\n", $instance->getPages());
    $current_path = \Drupal::service('path.current')->getPath();
    $path_match = \Drupal::service('path.matcher')->matchPath($current_path, $pages);

    if (empty($instance->getPages()) || $path_match) {
      $messenger = \Drupal::messenger()->addMessage($message, $message_type);
      $messenger->all();
    }
  }
}

/**
 * Implements hook_imagemagick_arguments_alter().
 */
function  aleevas_experiments_imagemagick_arguments_alter(\Drupal\imagemagick\ImagemagickExecArguments $arguments, $command) {
  // https://developers.google.com/speed/docs/insights/OptimizeImages
  $arguments->add('-sampling-factor 4:2:0');
  // Progression JPEG and interlaced PNG's support.
  $arguments->add('-interlace Plane');
  // Clean image for all unused data. EXIF etcetera.
  $arguments->add('-strip');
}

/**
 * Help function.
 * Create nodes from queue.
 *
 */
function _create_nodes_from_queue() {
  $queue = Drupal::queue('aleevas_mass_sending');
  $current_language = Drupal::languageManager()->getCurrentLanguage()->getId();
  $end = time() + 30;
  while (time() < $end && ($item = $queue->claimItem())) {
    $data = [
      'type' => 'article',
      'title' => t('The article created by @user', ['@user' => $item->data['name']]),
      'langcode' => $current_language,
      'uid' => $item->data['uid'],
      'status' => 1,
      'field_fields' => [],
    ];
    // Use Node static class.
    // $node = Node::create($data);
    // Use the entity manager.
    $node = Drupal::entityTypeManager()->getStorage('node')->create($data);
    $node->save();

    $queue->deleteItem($item);
  }
}

function _how_to_work_with_plugin() {
  // Connect to service of out plugins.
  $plugin_service = \Drupal::service('plugin.manager.plugin_messenger');
  // Get list of all our custom plugins (array).
  $plugin_definitions = $plugin_service->getDefinitions();
  // Get info about plugin by ID.
  $plugin_definition = $plugin_service->getDefinition('custom_plugin_1');
  // Check if we have this plugin or no.
  $has_plugin_definition = $plugin_service->hasDefinition('custom_plugin_1');
  // Create instance of instagram.
  $plugin_instance = $plugin_service->createInstance('default_plugin_example_1');
}

